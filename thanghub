-- Draggable GUI with Auto Press E, Delay Slider, and Anti-AFK
-- Fixed version to avoid nil value errors and prevent slider from moving the GUI

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local VirtualUser = game:GetService("VirtualUser")

-- Variables
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

-- Function to handle character respawn
local function onCharacterAdded(newCharacter)
    Character = newCharacter
    Humanoid = Character:WaitForChild("Humanoid")
    RootPart = Character:WaitForChild("HumanoidRootPart")
end

-- Connect character added event
Player.CharacterAdded:Connect(onCharacterAdded)

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "AutoPressEGui"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = Player.PlayerGui

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 200, 0, 170) -- Increased height for slider
MainFrame.Position = UDim2.new(0.5, -100, 0.7, 0)
MainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

-- Make frame draggable (custom implementation to not interfere with slider)
local isDragging = false
local dragInput
local dragStart
local startPos

local function updateDrag(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        isDragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                isDragging = false
            end
        end)
    end
end)

MainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and isDragging then
        updateDrag(input)
    end
end)

-- Round the corners
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = MainFrame

-- Title
local TitleLabel = Instance.new("TextLabel")
TitleLabel.Name = "TitleLabel"
TitleLabel.Size = UDim2.new(1, 0, 0, 30)
TitleLabel.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TitleLabel.BorderSizePixel = 0
TitleLabel.Text = "Auto Press E"
TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleLabel.TextSize = 18
TitleLabel.Font = Enum.Font.SourceSansBold
TitleLabel.Parent = MainFrame

-- Round the corners of the title
local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0, 8)
TitleCorner.Parent = TitleLabel

-- Status Label
local StatusLabel = Instance.new("TextLabel")
StatusLabel.Name = "StatusLabel"
StatusLabel.Size = UDim2.new(1, 0, 0, 25)
StatusLabel.Position = UDim2.new(0, 0, 0.25, 0)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "Status: OFF"
StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
StatusLabel.TextSize = 16
StatusLabel.Font = Enum.Font.SourceSans
StatusLabel.Parent = MainFrame

-- Delay Slider Label
local DelayLabel = Instance.new("TextLabel")
DelayLabel.Name = "DelayLabel"
DelayLabel.Size = UDim2.new(1, 0, 0, 20)
DelayLabel.Position = UDim2.new(0, 0, 0.4, 0)
DelayLabel.BackgroundTransparency = 1
DelayLabel.Text = "Delay: 0.1s"
DelayLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
DelayLabel.TextSize = 14
DelayLabel.Font = Enum.Font.SourceSans
DelayLabel.Parent = MainFrame

-- Slider Background
local SliderBackground = Instance.new("Frame")
SliderBackground.Name = "SliderBackground"
SliderBackground.Size = UDim2.new(0.8, 0, 0, 6)
SliderBackground.Position = UDim2.new(0.1, 0, 0.5, 0)
SliderBackground.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
SliderBackground.BorderSizePixel = 0
SliderBackground.Parent = MainFrame

-- Round the corners of the slider background
local SliderBackgroundCorner = Instance.new("UICorner")
SliderBackgroundCorner.CornerRadius = UDim.new(0, 3)
SliderBackgroundCorner.Parent = SliderBackground

-- Slider Fill
local SliderFill = Instance.new("Frame")
SliderFill.Name = "SliderFill"
SliderFill.Size = UDim2.new(0.033, 0, 1, 0) -- Start at 0.1s (0.1/3 = 0.033)
SliderFill.Position = UDim2.new(0, 0, 0, 0)
SliderFill.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
SliderFill.BorderSizePixel = 0
SliderFill.Parent = SliderBackground

-- Round the corners of the slider fill
local SliderFillCorner = Instance.new("UICorner")
SliderFillCorner.CornerRadius = UDim.new(0, 3)
SliderFillCorner.Parent = SliderFill

-- Slider Knob
local SliderKnob = Instance.new("Frame")
SliderKnob.Name = "SliderKnob"
SliderKnob.Size = UDim2.new(0, 16, 0, 16)
SliderKnob.Position = UDim2.new(0.033, -8, 0.5, -8) -- Same as SliderFill.Size.X.Scale
SliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SliderKnob.BorderSizePixel = 0
SliderKnob.Parent = SliderBackground

-- Round the knob
local SliderKnobCorner = Instance.new("UICorner")
SliderKnobCorner.CornerRadius = UDim.new(1, 0)
SliderKnobCorner.Parent = SliderKnob

-- Toggle Button
local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = "ToggleButton"
ToggleButton.Size = UDim2.new(0.7, 0, 0, 30)
ToggleButton.Position = UDim2.new(0.15, 0, 0.75, 0)
ToggleButton.BackgroundColor3 = Color3.fromRGB(230, 76, 76)
ToggleButton.BorderSizePixel = 0
ToggleButton.Text = "ENABLE"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextSize = 16
ToggleButton.Font = Enum.Font.SourceSansBold
ToggleButton.Parent = MainFrame

-- Round the corners of the button
local ButtonCorner = Instance.new("UICorner")
ButtonCorner.CornerRadius = UDim.new(0, 6)
ButtonCorner.Parent = ToggleButton

-- Variables for Auto Press E
local Enabled = false
local Cooldown = false
local CooldownTime = 0.1 -- Default cooldown between E presses (will be modified by slider)
local MinCooldown = 0.1
local MaxCooldown = 3.0
local ProximityPrompts = {}
local CurrentPrompt = nil
local MaxDistance = 12 -- Maximum distance to check for prompts
local DraggingSlider = false

-- Function to update UI
local function updateUI()
    if Enabled then
        StatusLabel.Text = "Status: ON"
        StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
        ToggleButton.Text = "DISABLE"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
    else
        StatusLabel.Text = "Status: OFF"
        StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        ToggleButton.Text = "ENABLE"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(230, 76, 76)
    end
end

-- Function to update delay
local function updateDelay(scale)
    -- Ensure scale is between 0 and 1
    scale = math.clamp(scale, 0, 1)
    
    -- Calculate new cooldown time
    CooldownTime = MinCooldown + (scale * (MaxCooldown - MinCooldown))
    CooldownTime = math.floor(CooldownTime * 100) / 100 -- Round to 2 decimal places
    
    -- Update UI elements
    DelayLabel.Text = "Delay: " .. CooldownTime .. "s"
    SliderFill.Size = UDim2.new(scale, 0, 1, 0)
    SliderKnob.Position = UDim2.new(scale, -8, 0.5, -8)
end

-- Toggle button click handler
ToggleButton.MouseButton1Click:Connect(function()
    Enabled = not Enabled
    updateUI()
end)

-- Button hover effects
ToggleButton.MouseEnter:Connect(function()
    TweenService:Create(ToggleButton, TweenInfo.new(0.3), {BackgroundColor3 = Enabled and Color3.fromRGB(100, 200, 100) or Color3.fromRGB(255, 100, 100)}):Play()
end)

ToggleButton.MouseLeave:Connect(function()
    TweenService:Create(ToggleButton, TweenInfo.new(0.3), {BackgroundColor3 = Enabled and Color3.fromRGB(76, 175, 80) or Color3.fromRGB(230, 76, 76)}):Play()
end)

-- Slider dragging handlers
SliderBackground.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        -- Prevent event propagation to the main frame
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                DraggingSlider = false
            end
        end)
        
        DraggingSlider = true
        
        -- Calculate scale based on mouse position
        local mousePos = input.Position.X
        local sliderPos = SliderBackground.AbsolutePosition.X
        local sliderSize = SliderBackground.AbsoluteSize.X
        
        local scale = math.clamp((mousePos - sliderPos) / sliderSize, 0, 1)
        updateDelay(scale)
    end
end)

SliderKnob.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        -- Stop propagation
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                DraggingSlider = false
            end
        end)
        
        DraggingSlider = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
        DraggingSlider = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if DraggingSlider and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        -- Calculate scale based on mouse position
        local mousePos = input.Position.X
        local sliderPos = SliderBackground.AbsolutePosition.X
        local sliderSize = SliderBackground.AbsoluteSize.X
        
        local scale = math.clamp((mousePos - sliderPos) / sliderSize, 0, 1)
        updateDelay(scale)
        
        -- Prevent the main frame from dragging while adjusting the slider
        isDragging = false
    end
end)

-- Function to press E
local function pressE()
    if Cooldown or not Enabled or not CurrentPrompt then return end
    
    Cooldown = true
    
    -- Input object simulation to trigger the proximity prompt
    if CurrentPrompt and CurrentPrompt.Parent then
        fireproximityprompt(CurrentPrompt)
    end
    
    -- Reset cooldown using the current delay value
    task.delay(CooldownTime, function()
        Cooldown = false
    end)
end

-- Function to get proximity prompts
local function getProximityPrompts()
    ProximityPrompts = {}
    
    -- Check if character and humanoid exist
    if not Character or not Character:IsDescendantOf(workspace) or not Humanoid or Humanoid.Health <= 0 then
        return
    end
    
    -- Check if RootPart exists
    if not RootPart then
        RootPart = Character:FindFirstChild("HumanoidRootPart")
        if not RootPart then return end
    end
    
    -- Get all proximity prompts in the workspace
    for _, object in pairs(workspace:GetDescendants()) do
        if object:IsA("ProximityPrompt") then
            -- Check if the proximity prompt is within MaxDistance
            local objectPosition = object.Parent and object.Parent:IsA("BasePart") and object.Parent.Position
            if objectPosition then
                local distance = (objectPosition - RootPart.Position).Magnitude
                if distance <= MaxDistance then
                    table.insert(ProximityPrompts, {prompt = object, distance = distance})
                end
            end
        end
    end
    
    -- Sort proximity prompts by distance
    table.sort(ProximityPrompts, function(a, b)
        return a.distance < b.distance
    end)
    
    -- Get the closest proximity prompt
    CurrentPrompt = ProximityPrompts[1] and ProximityPrompts[1].prompt or nil
end

-- Main loop
RunService.Heartbeat:Connect(function()
    if not Enabled then return end
    
    -- Safety check
    if not Player or not Player:IsDescendantOf(game:GetService("Players")) then return end
    
    -- Update character reference if needed
    if not Character or not Character:IsDescendantOf(workspace) then
        Character = Player.Character
        if Character then
            Humanoid = Character:FindFirstChild("Humanoid")
            RootPart = Character:FindFirstChild("HumanoidRootPart")
        end
        return
    end
    
    -- Update proximity prompts and try to press E
    getProximityPrompts()
    pressE()
end)

-- Function to safely execute fireproximityprompt
local function fireproximityprompt(prompt)
    -- Safety check before firing the prompt
    if typeof(prompt) == "Instance" and prompt:IsA("ProximityPrompt") and prompt.Parent then
        -- Check if the fireproximityprompt function exists
        if fireproximityprompt then
            pcall(function()
                fireproximityprompt(prompt)
            end)
        end
    end
end

-- Initialize with default delay
updateDelay(0.033) -- 0.1s default (0.1/3 = 0.033)

-- ===== ANTI-AFK SYSTEM =====

-- Create Anti-AFK GUI
local AntiAFKGui = Instance.new("ScreenGui")
local AntiAFKHeader = Instance.new("TextLabel")
local AntiAFKFrame = Instance.new("Frame")
local AntiAFKCredits = Instance.new("TextLabel")
local AntiAFKStatus = Instance.new("TextLabel")

-- Set up parent for GUI (CoreGui or PlayerGui)
pcall(function()
    AntiAFKGui.Parent = game:GetService("CoreGui")
end)

if not AntiAFKGui.Parent then
    AntiAFKGui.Parent = Player.PlayerGui
end

AntiAFKGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Header setup
AntiAFKHeader.Name = "AntiAFKHeader"
AntiAFKHeader.Parent = AntiAFKGui
AntiAFKHeader.Active = true
AntiAFKHeader.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
AntiAFKHeader.Position = UDim2.new(0.698610067, 0, 0.098096624, 0)
AntiAFKHeader.Size = UDim2.new(0, 370, 0, 52)
AntiAFKHeader.Font = Enum.Font.SourceSansSemibold
Ant
